"""Initial migration

Revision ID: ce9c7719be87
Revises: 
Create Date: 2025-05-06 08:16:01.021859

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ce9c7719be87'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('evaluation_dimensions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('model_id', sa.String(length=100), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('scale_type', sa.String(length=50), nullable=False),
    sa.Column('scale_options', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('evaluation_method', sa.String(length=50), nullable=False),
    sa.Column('ui_component', sa.String(length=50), nullable=True),
    sa.Column('help_text', sa.Text(), nullable=True),
    sa.Column('placeholder', sa.String(length=100), nullable=True),
    sa.Column('scale_labels', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.Column('is_required', sa.Boolean(), nullable=False),
    sa.Column('validation_rules', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('model_id', 'name', name='uq_model_dimension')
    )
    with op.batch_alter_table('evaluation_dimensions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_evaluation_dimensions_model_id'), ['model_id'], unique=False)

    op.create_table('interactions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.String(length=36), nullable=False, comment="String format to match Auth Service's public_id"),
    sa.Column('model_id', sa.String(length=100), nullable=False),
    sa.Column('model_version', sa.String(length=50), nullable=False),
    sa.Column('endpoint_name', sa.String(length=100), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=False),
    sa.Column('ended_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'COMPLETED', 'ABANDONED', name='interaction_status_enum'), nullable=False),
    sa.Column('interaction_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('conversation_history', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('interactions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_interactions_endpoint_name'), ['endpoint_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_interactions_model_id'), ['model_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_interactions_user_id'), ['user_id'], unique=False)

    op.create_table('prompts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('interaction_id', sa.UUID(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('sequence_number', sa.Integer(), nullable=False),
    sa.Column('submitted_at', sa.DateTime(), nullable=False),
    sa.Column('context', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['interaction_id'], ['interactions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('prompts', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_prompts_interaction_id'), ['interaction_id'], unique=False)

    op.create_table('responses',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('prompt_id', sa.UUID(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('generated_at', sa.DateTime(), nullable=False),
    sa.Column('feedback_provided', sa.Boolean(), nullable=False),
    sa.Column('model_endpoint', sa.String(length=100), nullable=False),
    sa.ForeignKeyConstraint(['prompt_id'], ['prompts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('responses', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_responses_prompt_id'), ['prompt_id'], unique=True)

    op.create_table('feedback',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('interaction_id', sa.UUID(), nullable=False),
    sa.Column('prompt_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('model_id', sa.String(length=100), nullable=False),
    sa.Column('model_version', sa.String(length=50), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('binary_evaluation', sa.Boolean(), nullable=True),
    sa.Column('ranking', sa.Integer(), nullable=True),
    sa.Column('justification', sa.Text(), nullable=True),
    sa.Column('validation_status', sa.Enum('PENDING', 'ACCEPTED', 'REJECTED', name='validation_status_enum'), nullable=False),
    sa.Column('validator_id', sa.String(length=36), nullable=True),
    sa.Column('validation_notes', sa.Text(), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('response_id', sa.UUID(), nullable=False),
    sa.Column('comments', sa.Text(), nullable=True),
    sa.Column('claimed_by', sa.UUID(), nullable=True),
    sa.Column('claimed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['interaction_id'], ['interactions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['prompt_id'], ['prompts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['response_id'], ['responses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('feedback', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_feedback_category'), ['category'], unique=False)
        batch_op.create_index(batch_op.f('ix_feedback_claimed_by'), ['claimed_by'], unique=False)
        batch_op.create_index(batch_op.f('ix_feedback_model_id'), ['model_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_feedback_response_id'), ['response_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_feedback_user_id'), ['user_id'], unique=False)

    op.create_table('dataset_entries',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('feedback_id', sa.UUID(), nullable=False),
    sa.Column('model_id', sa.String(length=100), nullable=False),
    sa.Column('prompt_text', sa.Text(), nullable=False),
    sa.Column('response_text', sa.Text(), nullable=False),
    sa.Column('correct_response', sa.Text(), nullable=True),
    sa.Column('dataset_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['feedback_id'], ['feedback.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('feedback_id')
    )
    with op.batch_alter_table('dataset_entries', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_dataset_entries_model_id'), ['model_id'], unique=False)

    op.create_table('dimension_ratings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('feedback_id', sa.UUID(), nullable=False),
    sa.Column('dimension_id', sa.UUID(), nullable=False),
    sa.Column('score', sa.Integer(), nullable=False),
    sa.Column('justification', sa.Text(), nullable=True),
    sa.Column('correct_response', sa.Text(), nullable=True),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.CheckConstraint('score >= 1 AND score <= 5', name='check_valid_score'),
    sa.ForeignKeyConstraint(['dimension_id'], ['evaluation_dimensions.id'], ),
    sa.ForeignKeyConstraint(['feedback_id'], ['feedback.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('feedback_id', 'dimension_id', name='uq_feedback_dimension')
    )
    with op.batch_alter_table('dimension_ratings', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_dimension_ratings_dimension_id'), ['dimension_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_dimension_ratings_feedback_id'), ['feedback_id'], unique=False)

    op.create_table('validation_records',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('feedback_id', sa.UUID(), nullable=False),
    sa.Column('validator_id', sa.String(length=36), nullable=False, comment="String format to match Auth Service's public_id"),
    sa.Column('is_valid', sa.Boolean(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('validated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['feedback_id'], ['feedback.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('validation_records', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_validation_records_feedback_id'), ['feedback_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_validation_records_validator_id'), ['validator_id'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('validation_records', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_validation_records_validator_id'))
        batch_op.drop_index(batch_op.f('ix_validation_records_feedback_id'))

    op.drop_table('validation_records')
    with op.batch_alter_table('dimension_ratings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_dimension_ratings_feedback_id'))
        batch_op.drop_index(batch_op.f('ix_dimension_ratings_dimension_id'))

    op.drop_table('dimension_ratings')
    with op.batch_alter_table('dataset_entries', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_dataset_entries_model_id'))

    op.drop_table('dataset_entries')
    with op.batch_alter_table('feedback', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_feedback_user_id'))
        batch_op.drop_index(batch_op.f('ix_feedback_response_id'))
        batch_op.drop_index(batch_op.f('ix_feedback_model_id'))
        batch_op.drop_index(batch_op.f('ix_feedback_claimed_by'))
        batch_op.drop_index(batch_op.f('ix_feedback_category'))

    op.drop_table('feedback')
    with op.batch_alter_table('responses', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_responses_prompt_id'))

    op.drop_table('responses')
    with op.batch_alter_table('prompts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_prompts_interaction_id'))

    op.drop_table('prompts')
    with op.batch_alter_table('interactions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_interactions_user_id'))
        batch_op.drop_index(batch_op.f('ix_interactions_model_id'))
        batch_op.drop_index(batch_op.f('ix_interactions_endpoint_name'))

    op.drop_table('interactions')
    with op.batch_alter_table('evaluation_dimensions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_evaluation_dimensions_model_id'))

    op.drop_table('evaluation_dimensions')
    # ### end Alembic commands ###
