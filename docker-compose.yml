# docker-compose.yml
version: '3.8'

services:
  interaction-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: interaction_service
    command: ["python", "-m", "flask", "run", "--host=0.0.0.0", "--port=8000", "--debug"]
    ports:
      - "8001:8000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/interaction_service
      - SQLALCHEMY_DATABASE_URI=postgresql://postgres:postgres@db:5432/interaction_service
      - FLASK_APP=run.py
      - FLASK_ENV=development
      - AUTH_SERVICE_URL=http://auth_api:5000
      - USER_SERVICE_URL=http://profile_api:5001
      - MODEL_SERVICE_URL=http://model-manager:8000
      - SERVICE_API_KEY=${SERVICE_API_KEY:-your-service-api-key-change-in-production}
      - AUTH_SERVICE_TOKEN=${AUTH_SERVICE_TOKEN:-your-auth-service-token-change-in-production}
      - SECRET_KEY=development-secret-key
      - JWT_SECRET_KEY=development-jwt-secret-key
    depends_on:
      db:
        condition: service_healthy
    networks:
      - interaction-network
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  db:
    image: postgres:16-alpine
    container_name: interaction_db
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=interaction_service
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - interaction-network
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching or rate limiting (optional)
  redis:
    image: redis:alpine
    container_name: interaction_redis
    ports:
      - "6380:6379"
    networks:
      - interaction-network
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  interaction-network:
    driver: bridge
  microservices-network:
    external: true

volumes:
  postgres_data: